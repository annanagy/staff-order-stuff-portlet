/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.support.stafforderstuff.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.support.stafforderstuff.model.Consumption;
import com.liferay.support.stafforderstuff.model.ConsumptionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Consumption service. Represents a row in the &quot;StaffOrderStuff_Consumption&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.support.stafforderstuff.model.ConsumptionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConsumptionImpl}.
 * </p>
 *
 * @author Anna & Ádám
 * @see ConsumptionImpl
 * @see com.liferay.support.stafforderstuff.model.Consumption
 * @see com.liferay.support.stafforderstuff.model.ConsumptionModel
 * @generated
 */
public class ConsumptionModelImpl extends BaseModelImpl<Consumption>
	implements ConsumptionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a consumption model instance should use the {@link com.liferay.support.stafforderstuff.model.Consumption} interface instead.
	 */
	public static final String TABLE_NAME = "StaffOrderStuff_Consumption";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ConsumptionId", Types.BIGINT },
			{ "UserId", Types.INTEGER },
			{ "FoodId", Types.INTEGER },
			{ "Date", Types.TIMESTAMP },
			{ "Quantity", Types.DOUBLE },
			{ "Unit", Types.VARCHAR },
			{ "Status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table StaffOrderStuff_Consumption (ConsumptionId LONG not null primary key,UserId INTEGER,FoodId INTEGER,Date DATE null,Quantity DOUBLE,Unit VARCHAR(75) null,Status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table StaffOrderStuff_Consumption";
	public static final String ORDER_BY_JPQL = " ORDER BY consumption.ConsumptionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY StaffOrderStuff_Consumption.ConsumptionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.support.stafforderstuff.model.Consumption"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.support.stafforderstuff.model.Consumption"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.support.stafforderstuff.model.Consumption"),
			true);
	public static long CONSUMPTIONID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.support.stafforderstuff.model.Consumption"));

	public ConsumptionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ConsumptionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConsumptionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ConsumptionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Consumption.class;
	}

	@Override
	public String getModelClassName() {
		return Consumption.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ConsumptionId", getConsumptionId());
		attributes.put("UserId", getUserId());
		attributes.put("FoodId", getFoodId());
		attributes.put("Date", getDate());
		attributes.put("Quantity", getQuantity());
		attributes.put("Unit", getUnit());
		attributes.put("Status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ConsumptionId = (Long)attributes.get("ConsumptionId");

		if (ConsumptionId != null) {
			setConsumptionId(ConsumptionId);
		}

		Integer UserId = (Integer)attributes.get("UserId");

		if (UserId != null) {
			setUserId(UserId);
		}

		Integer FoodId = (Integer)attributes.get("FoodId");

		if (FoodId != null) {
			setFoodId(FoodId);
		}

		Date Date = (Date)attributes.get("Date");

		if (Date != null) {
			setDate(Date);
		}

		Double Quantity = (Double)attributes.get("Quantity");

		if (Quantity != null) {
			setQuantity(Quantity);
		}

		String Unit = (String)attributes.get("Unit");

		if (Unit != null) {
			setUnit(Unit);
		}

		Integer Status = (Integer)attributes.get("Status");

		if (Status != null) {
			setStatus(Status);
		}
	}

	@Override
	public long getConsumptionId() {
		return _ConsumptionId;
	}

	@Override
	public void setConsumptionId(long ConsumptionId) {
		_columnBitmask |= CONSUMPTIONID_COLUMN_BITMASK;

		if (!_setOriginalConsumptionId) {
			_setOriginalConsumptionId = true;

			_originalConsumptionId = _ConsumptionId;
		}

		_ConsumptionId = ConsumptionId;
	}

	public long getOriginalConsumptionId() {
		return _originalConsumptionId;
	}

	@Override
	public int getUserId() {
		return _UserId;
	}

	@Override
	public void setUserId(int UserId) {
		_UserId = UserId;
	}

	@Override
	public int getFoodId() {
		return _FoodId;
	}

	@Override
	public void setFoodId(int FoodId) {
		_FoodId = FoodId;
	}

	@Override
	public Date getDate() {
		return _Date;
	}

	@Override
	public void setDate(Date Date) {
		_Date = Date;
	}

	@Override
	public double getQuantity() {
		return _Quantity;
	}

	@Override
	public void setQuantity(double Quantity) {
		_Quantity = Quantity;
	}

	@Override
	public String getUnit() {
		if (_Unit == null) {
			return StringPool.BLANK;
		}
		else {
			return _Unit;
		}
	}

	@Override
	public void setUnit(String Unit) {
		_Unit = Unit;
	}

	@Override
	public int getStatus() {
		return _Status;
	}

	@Override
	public void setStatus(int Status) {
		_Status = Status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Consumption.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Consumption toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Consumption)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConsumptionImpl consumptionImpl = new ConsumptionImpl();

		consumptionImpl.setConsumptionId(getConsumptionId());
		consumptionImpl.setUserId(getUserId());
		consumptionImpl.setFoodId(getFoodId());
		consumptionImpl.setDate(getDate());
		consumptionImpl.setQuantity(getQuantity());
		consumptionImpl.setUnit(getUnit());
		consumptionImpl.setStatus(getStatus());

		consumptionImpl.resetOriginalValues();

		return consumptionImpl;
	}

	@Override
	public int compareTo(Consumption consumption) {
		long primaryKey = consumption.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Consumption)) {
			return false;
		}

		Consumption consumption = (Consumption)obj;

		long primaryKey = consumption.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConsumptionModelImpl consumptionModelImpl = this;

		consumptionModelImpl._originalConsumptionId = consumptionModelImpl._ConsumptionId;

		consumptionModelImpl._setOriginalConsumptionId = false;

		consumptionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Consumption> toCacheModel() {
		ConsumptionCacheModel consumptionCacheModel = new ConsumptionCacheModel();

		consumptionCacheModel.ConsumptionId = getConsumptionId();

		consumptionCacheModel.UserId = getUserId();

		consumptionCacheModel.FoodId = getFoodId();

		Date Date = getDate();

		if (Date != null) {
			consumptionCacheModel.Date = Date.getTime();
		}
		else {
			consumptionCacheModel.Date = Long.MIN_VALUE;
		}

		consumptionCacheModel.Quantity = getQuantity();

		consumptionCacheModel.Unit = getUnit();

		String Unit = consumptionCacheModel.Unit;

		if ((Unit != null) && (Unit.length() == 0)) {
			consumptionCacheModel.Unit = null;
		}

		consumptionCacheModel.Status = getStatus();

		return consumptionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{ConsumptionId=");
		sb.append(getConsumptionId());
		sb.append(", UserId=");
		sb.append(getUserId());
		sb.append(", FoodId=");
		sb.append(getFoodId());
		sb.append(", Date=");
		sb.append(getDate());
		sb.append(", Quantity=");
		sb.append(getQuantity());
		sb.append(", Unit=");
		sb.append(getUnit());
		sb.append(", Status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("com.liferay.support.stafforderstuff.model.Consumption");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ConsumptionId</column-name><column-value><![CDATA[");
		sb.append(getConsumptionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>UserId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>FoodId</column-name><column-value><![CDATA[");
		sb.append(getFoodId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Unit</column-name><column-value><![CDATA[");
		sb.append(getUnit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Consumption.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Consumption.class
		};
	private long _ConsumptionId;
	private long _originalConsumptionId;
	private boolean _setOriginalConsumptionId;
	private int _UserId;
	private int _FoodId;
	private Date _Date;
	private double _Quantity;
	private String _Unit;
	private int _Status;
	private long _columnBitmask;
	private Consumption _escapedModel;
}